composer require livewire/livewire
Remove-Item -Path .git/index.lock
composer require maatwebsite/excel
//php artisan make:export BorrowExport --model=Borrow

//vendor/src/panel/auth/login.php

composer require barryvdh/laravel-debugbar --dev
php artisan vendor:publish --provider="Barryvdh\Debugbar\ServiceProvider"

//in app.php, debug bool, change to true
//make sure app_debug is true too in env
//reload homepage
//https://github.com/barryvdh/laravel-debugbar

//making import
php artisan make:import CategoryImport
//copy the code in import and the list
//import action and classes

//export
use Illuminate\Database\Eloquent\Builder; for latest
protected function getTableQuery(): ?Builder
    {
        // Get the base query and order it by the latest created_at field
        return parent::getTableQuery()->latest('created_at');
    }
*use Filament\Tables\Actions\ExportBulkAction; 
    
//write code after public function Tables
//return the bulk action in the last
//    public static function table(Tables\Table $table): Tables\Table


export true
**
use pxlrbt\FilamentExcel\Actions\Tables\ExportBulkAction;
**
public static function table(Tables\Table $table): Tables\Table
    
{
        $user = auth()->user();
        $isPanelUser = $user && $user->hasRole('panel_user');

         // Define the bulk actions array
         $bulkActions = [
            Tables\Actions\DeleteBulkAction::make(),
            //Tables\Actions\ExportBulkAction::make()

         ];
                 // Conditionally add ExportBulkAction

            if (!$isPanelUser) {
                $bulkActions[] = ExportBulkAction::make();
            }
            return $table
            ->query(Category::with('user'))
            ->columns([
    
         
                    Tables\Columns\TextColumn::make('description')
                        ->formatStateUsing(fn (string $state): string => ucwords(strtolower($state)))
                        ->searchable()
                        ->sortable(),

**insert after actions and filters
->bulkActions([
                Tables\Actions\BulkActionGroup::make($bulkActions)
                    ->label('Actions')
            ]);
            }


**********making tab


********widget
php artisan make:filament-widget TestWidget

**typeof chart
**resource, just skip
*admin panel

-- in return
Stat::make('New Users', Users::count())
->description('New users that joined')
->descriptionIcon('heroicon-m-users',IconPosition )
->chart([1,3,5,10,20])
-<color('success')
--import user model
--use Filament\Support\Enums\IconPosition::Before;
--use filament\widgets\StatsOverviewWidget as BaseWidget;
*8register widget in admin panel
Widgets\FilamentInfoWidget or AccountWidget::class
**import wifget aldo inadmin panel

**making resource
--create migration, model, resource, 

**laravel logs:
--goto:https://github.com/spatie/laravel-activitylog
composer require spatie/laravel-activitylog
php artisan vendor:publish --provider="Spatie\Activitylog\ActivitylogServiceProvider" --tag="activitylog-migrations"
php artisan vendor:publish --provider="Spatie\Activitylog\ActivitylogServiceProvider" --tag="activitylog-config"
php artisan migrate
**activity_log is seen in db
--goto:https://spatie.be/docs/laravel-activitylog/v4/introduction



***widget filters



view stock: Tables\Actions\ViewAction::make('ViewStockMonitoring')
                        ->label('View Stock Records')
                        ->icon('heroicon-o-presentation-chart-bar')
                        ->color('info')
                        ->modalHeading('Stock Monitoring Records')
                        ->modalcontent(function ($record) {
                            // Retrieve stock history
                            $stockHistory = \App\Models\StockMonitoring::where('equipment_id', $record->id)
                                ->with('user') // Assuming 'monitored_by' is related to the 'users' table
                                ->orderBy('deducted_at', 'desc')
                                ->get();
                    
                            // Debugging output
                            if ($stockHistory->isEmpty()) {
                                \Log::info("No stock history found for equipment ID: " . $record->id);
                            } else {
                                \Log::info("Stock history retrieved for equipment ID: " . $record->id);
                            }
                    
                            return view('filament.resources.stock-monitoring-modal', [
                                'stockHistory' => $stockHistory,
                            ]);
                        }),



******making print pdf in dashboard
composer require barryvdh/laravel-dompdf
// Create a Route for PDF Generation
//Define a route in your web.php for generating the PDF.

****export to word:
composer require phpoffice/phpword




***media library
composer require filament/spatie-laravel-media-library-plugin:"^2.0"
php artisan vendor:publish --provider="Spatie\MediaLibrary\MediaLibraryServiceProvider" --tag="medialibrary-migrations"
php artisan migrate
--go to the supp and materials model, add has media trait

**seeders

php artisan make:seeder Role seeder
--goto seeder--got ot databseseeder


**hiding disableToolbarButtons

-- public static function table(Tables\Table $table): Tables\Table
    {
        $user = auth()->user();
        $isPublic = $user && $user->hasRole('public');

--go to export
-- if (!$isPublic) {
            $bulkActions[] = ExportBulkAction::make();
        }

--go to ->actions

--                Notification::make()
                                    ->success()
                                    ->title('Success')
                                    ->body('Status of the selected item/s have been updated.')
                                    ->send();
                            })
                       
                            ->hidden(fn () => $isPublic),

                    ]),


**deploy vrcel

--install vercel
npm i -g vercel
vercel --version

--go to project
mkdir api
--create index.php inside api folder
--copy in that file

<?php
require __DIR__ . "/../public/index.php";

--create ne file in project/vercel.json
--paste
{
    "version": 2,
      "framework": null,
    "functions": {
        "api/index.php": { "runtime": "vercel-php@0.6.0" }
    },
    "routes": [{
        "src": "/(.*)",
        "dest": "/api/index.php"
    }],
    "env": {
        "APP_ENV": "production",
        "APP_DEBUG": "true",
        "APP_URL": "https://yourproductionurl.com",
 
        "APP_CONFIG_CACHE": "/tmp/config.php",
        "APP_EVENTS_CACHE": "/tmp/events.php",
        "APP_PACKAGES_CACHE": "/tmp/packages.php",
        "APP_ROUTES_CACHE": "/tmp/routes.php",
        "APP_SERVICES_CACHE": "/tmp/services.php",
        "VIEW_COMPILED_PATH": "/tmp",
 
        "CACHE_DRIVER": "array",
        "LOG_CHANNEL": "stderr",
        "SESSION_DRIVER": "cookie"
    }
}

--in terminal
mkdir dist
vercel project add ccis_comlab_system/

**git commit error index
in cmd--tasklist | findstr git
in project--Remove-Item .git\index.lock
try again

** note in import
facility and category columnmust not be absent

**hide navig

public static bool $shouldRegisterNavigation=false;
--go to admin panel
in the last add thisline

**** if black screen
composer require spatie/laravel-permission
php artisan shield:install


------------------------------
video 10...livewire video
video 11: navbar

php artisan make:livewire partials.navbar
CLASS: app/Livewire//Partials/Navbar.php
VIEW:  C:\Users\Student\Videos\ccis_comlab_system\resources\views/livewire/partials\navbar.blade.php

https://github.com/DCodeMania/ecommerce-ui-resources

make code in navbar blade. now go back to app.blade.php and insert the partials.navbar under body class
the app.blade is located in res/views/components/layouts/app.bladde.php

-----------------------
install flowbite

npm install flowbite
in tailwind.config.js, add the flowbite
========================================================================
import defaultTheme from 'tailwindcss/defaultTheme';
import forms from '@tailwindcss/forms';

/** @type {import('tailwindcss').Config} */
export default {
    content: [
        './vendor/laravel/framework/src/Illuminate/Pagination/resources/views/*.blade.php',
        './storage/framework/views/*.php',
        './resources/views/**/*.blade.php',
        "./resources/**/*.{html,js}",
         'node_modules/preline/dist/*.js',
         "./node_modules/flowbite/**/*.js",

         
    ],
    darkMode:'class',
    theme: {
        extend: {
            fontFamily: {
                sans: ['Figtree', ...defaultTheme.fontFamily.sans],
            },
        },
    },

    plugins: [
        // forms,
        require('preline/plugin'),
        require('flowbite/plugin'),
    ],
};
=============================================
Then in app.js, import flowbite
=========================================
import './bootstrap';


import Alpine from 'alpinejs';
import 'preline';
import 'flowbite';



window.Alpine = Alpine;

Alpine.start();
===========================================
iterator error:

paste this in srtableiterator
===============================================================================
<?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

 namespace Symfony\Component\Finder\Iterator;

 class SortableIterator implements \IteratorAggregate
 {
     public const SORT_BY_NONE = 0;
     public const SORT_BY_NAME = 1;
     public const SORT_BY_TYPE = 2;
     public const SORT_BY_ACCESSED_TIME = 3;
     public const SORT_BY_CHANGED_TIME = 4;
     public const SORT_BY_MODIFIED_TIME = 5;
     public const SORT_BY_NAME_NATURAL = 6;
     public const SORT_BY_NAME_CASE_INSENSITIVE = 7;
     public const SORT_BY_NAME_NATURAL_CASE_INSENSITIVE = 8;
     public const SORT_BY_EXTENSION = 9;
     public const SORT_BY_SIZE = 10;
 
     private \Traversable $iterator;
     private \Closure|int $sort;
 
     public function __construct(\Traversable $iterator, int|callable $sort, bool $reverseOrder = false)
     {
         $this->iterator = $iterator;
         $order = $reverseOrder ? -1 : 1;
 
         // Cache file properties to reduce system calls
         $cache = [];
 
         $getPath = function (\SplFileInfo $file) use (&$cache) {
             return $cache[$file->getPathname()] ??= $file->getRealPath() ?: $file->getPathname();
         };
 
         if ($sort === self::SORT_BY_NAME) {
             $this->sort = fn($a, $b) => $order * strcmp($getPath($a), $getPath($b));
         } elseif ($sort === self::SORT_BY_NAME_NATURAL) {
             $this->sort = fn($a, $b) => $order * strnatcmp($getPath($a), $getPath($b));
         } elseif ($sort === self::SORT_BY_NAME_CASE_INSENSITIVE) {
             $this->sort = fn($a, $b) => $order * strcasecmp($getPath($a), $getPath($b));
         } elseif ($sort === self::SORT_BY_NAME_NATURAL_CASE_INSENSITIVE) {
             $this->sort = fn($a, $b) => $order * strnatcasecmp($getPath($a), $getPath($b));
         } elseif ($sort === self::SORT_BY_TYPE) {
             $this->sort = fn($a, $b) => ($a->isDir() !== $b->isDir()) ? ($a->isDir() ? -$order : $order) : $order * strcmp($getPath($a), $getPath($b));
         } elseif ($sort === self::SORT_BY_ACCESSED_TIME) {
             $this->sort = fn($a, $b) => $order * ($a->getATime() - $b->getATime());
         } elseif ($sort === self::SORT_BY_CHANGED_TIME) {
             $this->sort = fn($a, $b) => $order * ($a->getCTime() - $b->getCTime());
         } elseif ($sort === self::SORT_BY_MODIFIED_TIME) {
             $this->sort = fn($a, $b) => $order * ($a->getMTime() - $b->getMTime());
         } elseif ($sort === self::SORT_BY_EXTENSION) {
             $this->sort = fn($a, $b) => $order * strnatcmp($a->getExtension(), $b->getExtension());
         } elseif ($sort === self::SORT_BY_SIZE) {
             $this->sort = fn($a, $b) => $order * ($a->getSize() - $b->getSize());
         } elseif ($sort === self::SORT_BY_NONE) {
             $this->sort = $order;
         } elseif (is_callable($sort)) {
             $this->sort = $reverseOrder ? fn($a, $b) => -$sort($a, $b) : $sort;
         } else {
             throw new \InvalidArgumentException('Invalid sort type or callable provided.');
         }
     }
 
     public function getIterator(): \Traversable
     {
         if ($this->sort === 1) {
             return $this->iterator;
         }
 
         // Convert to array for sorting
         $array = iterator_to_array($this->iterator, true);
 
         if ($this->sort === -1) {
             $array = array_reverse($array);
         } else {
             uasort($array, $this->sort);
         }
 
         return new \ArrayIterator($array);
     }
 }
 ======================================================================================================

 making QR code

 composer require simplesoftwareio/simple-qrcode

 --watch this video:https://www.youtube.com/watch?v=nLNClenxwSs
--in this case i use larazeus
  php artisan make:filament-page ViewQrCode --resource=EquipmentResource --type=ViewRecord
  --register the view in getpagges of equipment
              'qr-code' => Pages\ViewQrCode::route('/{record}/qr-code'),

--create a table action
--then in equipment resource fin the custom page
in views create a view in res/views/filament/resources/equipment-resource/views/view-qr-code.blade.php
    in view qr-code resource,insert this 
    protected static string $view = 'filament.resources.equipment-resource..pages.view-qr-code';

    --in view, 
--1. Install Imagick
--First, update your package list:

sudo apt update
sudo service php8.2.12-fpm restart
sudo yum install php-pecl-imagick
sudo systemctl restart php-fpm

=---install imagick
--watch yt:    https://www.imagemagick.org/script/download.php#windows

1- Pre-installation
  - PHP version
  - Architecture (64/86)
  - Thread Safety (enabled)
2- Download and install ImageMagick for Windows
   https://www.imagemagick.org/script/download.php#windows

3- Download Imagick for PHP
  https://pecl.php.net/package/imagick/3.7.0/windows
  - copy php_imagick.dll and pass into C:\xampp\php\ext
  - open php.ini (Dynamic Extensions) in last module settings
    extension=php_imagick.dll

4- Download required Imagick binaries
  https://windows.php.net/downloads/pecl/deps/
  - copy all CORE_* in bin and IM_MOD_* file and pass into C:\xampp\apache\bin
161 items
  C:\Program Files\ImageMagick-7.1.1-Q16-HDRI
  to confirm installation, check localhost search for imagick

  https://www.youtube.com/watch?v=y_OHy5qNJlQ--yt watch for qr code


  ---------------------------------------------------
  performance tips

  --yt https://www.youtube.com/watch?v=LA2jgtAn4Sc&list=PL1TrjkMQ8UbWRZ4tv4GW_KwbyavOxt6bc

  ------------------------------------
  laravel dompdf for print and download
  -yt:https://www.youtube.com/watch?v=3_I7UHSV9l0&t=334s
  composer require barryvdh/laravel-dompdf
    use Barryvdh\DomPDF\Facade\Pdf;


  ------------------------browsershot
  composer require spatie/browsershot
  https://www.youtube.com/watch?v=a6pVPcUiQ9U

-------------------make active links in nav bar with color
--go to home anchor in navbar
use the request

 <a class="font-medium {{ request()->is('facilities') ? 'text-orange-600' : 'text-gray-500 '}} hover:text-gray-400 py-3 md:py-6 dark:text-gray-400 dark:hover:text-gray-500 dark:focus:outline-none dark:focus:ring-1 dark:focus:ring-gray-600" href="/facilities">
----------making page in livewire
php artisan make livewire EquipmentPage
--in controller fetch the model
 public function render()
    {
        return view('livewire.supplies-and-materials-page', [
            'supplies' => SuppliesAndMaterials::all(),
        ]);
    }
--in page blade make it singular like supplies as supply for the loop
--then go to web.php for routing and 
Route::get('/facilities', FacilitiesPage::class);
Route::get('/supplies-and-materials', SuppliesAndMaterialsPage::class);
-----------------to prevent loading of whole page, use
wire:navigate
--in anchor tag before class
------------------