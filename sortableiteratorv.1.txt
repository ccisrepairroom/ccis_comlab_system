<?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

 namespace Symfony\Component\Finder\Iterator;

 class SortableIterator implements \IteratorAggregate
 {
     public const SORT_BY_NONE = 0;
     public const SORT_BY_NAME = 1;
     public const SORT_BY_TYPE = 2;
     public const SORT_BY_ACCESSED_TIME = 3;
     public const SORT_BY_CHANGED_TIME = 4;
     public const SORT_BY_MODIFIED_TIME = 5;
     public const SORT_BY_NAME_NATURAL = 6;
     public const SORT_BY_NAME_CASE_INSENSITIVE = 7;
     public const SORT_BY_NAME_NATURAL_CASE_INSENSITIVE = 8;
     public const SORT_BY_EXTENSION = 9;
     public const SORT_BY_SIZE = 10;
 
     private \Traversable $iterator;
     private \Closure|int $sort;
 
     public function __construct(\Traversable $iterator, int|callable $sort, bool $reverseOrder = false)
     {
         $this->iterator = $iterator;
         $order = $reverseOrder ? -1 : 1;
 
         // Cache file properties to reduce system calls
         $cache = [];
 
         $getPath = function (\SplFileInfo $file) use (&$cache) {
             return $cache[$file->getPathname()] ??= $file->getRealPath() ?: $file->getPathname();
         };
 
         if ($sort === self::SORT_BY_NAME) {
             $this->sort = fn($a, $b) => $order * strcmp($getPath($a), $getPath($b));
         } elseif ($sort === self::SORT_BY_NAME_NATURAL) {
             $this->sort = fn($a, $b) => $order * strnatcmp($getPath($a), $getPath($b));
         } elseif ($sort === self::SORT_BY_NAME_CASE_INSENSITIVE) {
             $this->sort = fn($a, $b) => $order * strcasecmp($getPath($a), $getPath($b));
         } elseif ($sort === self::SORT_BY_NAME_NATURAL_CASE_INSENSITIVE) {
             $this->sort = fn($a, $b) => $order * strnatcasecmp($getPath($a), $getPath($b));
         } elseif ($sort === self::SORT_BY_TYPE) {
             $this->sort = fn($a, $b) => ($a->isDir() !== $b->isDir()) ? ($a->isDir() ? -$order : $order) : $order * strcmp($getPath($a), $getPath($b));
         } elseif ($sort === self::SORT_BY_ACCESSED_TIME) {
             $this->sort = fn($a, $b) => $order * ($a->getATime() - $b->getATime());
         } elseif ($sort === self::SORT_BY_CHANGED_TIME) {
             $this->sort = fn($a, $b) => $order * ($a->getCTime() - $b->getCTime());
         } elseif ($sort === self::SORT_BY_MODIFIED_TIME) {
             $this->sort = fn($a, $b) => $order * ($a->getMTime() - $b->getMTime());
         } elseif ($sort === self::SORT_BY_EXTENSION) {
             $this->sort = fn($a, $b) => $order * strnatcmp($a->getExtension(), $b->getExtension());
         } elseif ($sort === self::SORT_BY_SIZE) {
             $this->sort = fn($a, $b) => $order * ($a->getSize() - $b->getSize());
         } elseif ($sort === self::SORT_BY_NONE) {
             $this->sort = $order;
         } elseif (is_callable($sort)) {
             $this->sort = $reverseOrder ? fn($a, $b) => -$sort($a, $b) : $sort;
         } else {
             throw new \InvalidArgumentException('Invalid sort type or callable provided.');
         }
     }
 
     public function getIterator(): \Traversable
     {
         if ($this->sort === 1) {
             return $this->iterator;
         }
 
         // Convert to array for sorting
         $array = iterator_to_array($this->iterator, true);
 
         if ($this->sort === -1) {
             $array = array_reverse($array);
         } else {
             uasort($array, $this->sort);
         }
 
         return new \ArrayIterator($array);
     }
 }
 